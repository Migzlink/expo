{"version":3,"file":"NativeTabsView.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/NativeTabsView.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  DefaultRouterOptions,\n  ParamListBase,\n  TabNavigationState,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\nimport React from 'react';\nimport { BottomTabs, enableFreeze, featureFlags } from 'react-native-screens';\nimport { BottomTabsProps } from 'react-native-screens/lib/typescript/components/BottomTabs';\nimport type { BottomTabsScreenProps } from 'react-native-screens/lib/typescript/components/BottomTabsScreen';\nimport BottomTabsScreen from 'react-native-screens/src/components/BottomTabsScreen';\n\n// import { useBottomTabAccessory } from './NativeTabsViewContext';\nimport { TabInfoContext } from './TabInfoContext';\n\nenableFreeze(false);\nconst isControlledMode = Platform.OS === 'android';\nfeatureFlags.experiment.controlledBottomTabs = isControlledMode;\n\nexport interface NativeTabOptions extends DefaultRouterOptions {\n  tabBarBackgroundColor?: BottomTabsScreenProps['tabBarBackgroundColor'];\n  tabBarBlurEffect?: BottomTabsScreenProps['tabBarBlurEffect']; // defaults to 'none'\n\n  tabBarItemTitleFontFamily?: BottomTabsScreenProps['tabBarItemTitleFontFamily'];\n  tabBarItemTitleFontSize?: BottomTabsScreenProps['tabBarItemTitleFontSize'];\n  tabBarItemTitleFontWeight?: BottomTabsScreenProps['tabBarItemTitleFontWeight'];\n  tabBarItemTitleFontStyle?: BottomTabsScreenProps['tabBarItemTitleFontStyle'];\n  tabBarItemTitleFontColor?: BottomTabsScreenProps['tabBarItemTitleFontColor'];\n  tabBarItemTitlePositionAdjustment?: BottomTabsScreenProps['tabBarItemTitlePositionAdjustment'];\n\n  tabBarItemIconColor?: BottomTabsScreenProps['tabBarItemIconColor'];\n\n  tabBarItemBadgeBackgroundColor?: BottomTabsScreenProps['tabBarItemBadgeBackgroundColor'];\n\n  // General\n  title?: BottomTabsScreenProps['title'];\n\n  iconSFSymbolName?: BottomTabsScreenProps['iconSFSymbolName'];\n  selectedIconSFSymbolName?: BottomTabsScreenProps['selectedIconSFSymbolName'];\n\n  badgeValue?: BottomTabsScreenProps['badgeValue'];\n}\n\nexport type NativeTabsViewProps = Omit<BottomTabsProps, 'onNativeFocusChange'> & {\n  builder: ReturnType<\n    typeof useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      Record<string, (...args: any) => void>,\n      NativeTabOptions,\n      Record<string, any>\n    >\n  >;\n};\n\nexport function NativeTabsView(props: NativeTabsViewProps) {\n  const { builder, ...rest } = props;\n  const { state, descriptors, navigation } = builder;\n  const { routes } = state;\n  // const { bottomTabAccessory } = useBottomTabAccessory();\n\n  // const focusedScreenKey = state.routes[state.index].key;\n\n  const children = routes\n    .filter(({ key }) => (descriptors[key].options as any)?.tabBarItemStyle?.display !== 'none')\n    .map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const isFocused = state.index === index;\n      console.log('Rendering tab', route.key, 'isFocused:', isFocused);\n\n      return (\n        <TabInfoContext value={{ tabKey: route.key }} key={route.key}>\n          <BottomTabsScreen\n            {...descriptor.options}\n            tabKey={route.key}\n            isFocused={isFocused}\n            onWillAppear={() => {\n              console.log('On will appear', route.name);\n              if (!isControlledMode) {\n                navigation.dispatch({\n                  type: 'JUMP_TO',\n                  target: state.key,\n                  payload: {\n                    name: route.name,\n                  },\n                });\n              }\n            }}>\n            {descriptor.render()}\n          </BottomTabsScreen>\n        </TabInfoContext>\n      );\n    });\n  // const focusedTabAccessoryProps = bottomTabAccessory[focusedScreenKey];\n  // console.log('\\n\\n\\n\\n\\naccessory', focusedTabAccessoryProps, bottomTabAccessory);\n\n  return (\n    <BottomTabs\n      {...rest}\n      onNativeFocusChange={({ nativeEvent: { tabKey } }) => {\n        console.log('onNativeFocusChange', tabKey);\n        if (isControlledMode) {\n          const descriptor = descriptors[tabKey];\n          const route = descriptor.route;\n          navigation.dispatch({\n            type: 'JUMP_TO',\n            target: state.key,\n            payload: {\n              name: route.name,\n            },\n          });\n        }\n        navigation.emit({ type: 'tabPress', target: tabKey });\n      }}>\n      {children}\n      {/* {focusedTabAccessoryProps && (\n        <BottomAccessory\n          {...focusedTabAccessoryProps}\n          onTabAccessoryEnvironmentChange={({ nativeEvent }) => {\n            console.log('onTabAccessoryEnvironmentChange', nativeEvent);\n          }}\n        />\n      )} */}\n    </BottomTabs>\n  );\n}\n"]}